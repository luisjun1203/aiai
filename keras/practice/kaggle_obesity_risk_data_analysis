import numpy as np
import pandas as pd
import time
from keras.models import Sequential, Model, load_model
from keras. layers import Dense, Conv1D, SimpleRNN, LSTM, Flatten, GRU, Dropout, Input, concatenate
from keras. callbacks import EarlyStopping, ModelCheckpoint
from keras. utils import to_categorical
from sklearn.model_selection import train_test_split 
from sklearn.metrics import f1_score, mean_squared_error, accuracy_score, r2_score
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler, MinMaxScaler, RobustScaler, MaxAbsScaler
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import keras
import tensorflow as tf
import random as rn
from sklearn.ensemble import RandomForestClassifier 



path = "c:\\_data\\kaggle\\obesity_risk\\"


train_csv = pd.read_csv(path + "train.csv", index_col=0)
test_csv = pd.read_csv(path + "test.csv", index_col=0)
submission_csv = pd.read_csv(path + "sample_submission.csv")


# print(train_csv.describe())
#                 Age        Height        Weight          FCVC           NCP          CH2O           FAF           TUE
# count  20758.000000  20758.000000  20758.000000  20758.000000  20758.000000  20758.000000  20758.000000  20758.000000
# mean      23.841804      1.700245     87.887768      2.445908      2.761332      2.029418      0.981747      0.616756
# std        5.688072      0.087312     26.379443      0.533218      0.705375      0.608467      0.838302      0.602113
# min       14.000000      1.450000     39.000000      1.000000      1.000000      1.000000      0.000000      0.000000
# 25%       20.000000      1.631856     66.000000      2.000000      3.000000      1.792022      0.008013      0.000000
# 50%       22.815416      1.700000     84.064875      2.393837      3.000000      2.000000      1.000000      0.573887
# 75%       26.000000      1.762887    111.600553      3.000000      3.000000      2.549617      1.587406      1.000000
# max       61.000000      1.975663    165.057269      3.000000      4.000000      3.000000      3.000000      2.000000

# print(np.unique(train_csv['NCP'], return_counts=True))



print(np.unique(train_csv['NCP'], return_counts=True))




# print(np.unique(train_csv['NCP'], return_counts=True))
train_csv['BMI'] = 1.3 * (train_csv['Weight'] / (train_csv['Height']*2.5))

# print(train_csv['BMI'])

print(train_csv.info())


# BMI = 100/(1.7*1.7)
# print(BMI) 

aaa = train_csv["Weight"]

def outliers(data_out):
    quartile_1, q2, quartile_3 = np.percentile(data_out, [25, 50, 75])      # 사분위 값 25%, 50%, 75% 계산
    print("1사분위 : ", quartile_1)
    print("q2 : ", q2)
    print("3사분위 : ", quartile_3)
    iqr = quartile_3 -quartile_1                # iqr계산 : quartile_3 - quartile_1
    print("iqr : ", iqr)
    lower_bound = quartile_1 - (iqr * 1.5)      # lower_bound와 upper_bound: 이상치를 식별하기 위한 하한값과 상한값을 계산함.
    upper_bound = quartile_3 + (iqr * 1.5)      # 여기서  나온 하한값보다 작거나 상한값보다 큰 애들은 이상치라 판별
    return np.where((data_out > upper_bound) |  # np.where : 이상치의 위치를 반환, | : 또는 
                    (data_out < lower_bound))
    
outliers_loc = outliers(aaa)
print("이상치의 위치 : ", outliers_loc) 

import matplotlib.pyplot as plt
plt.boxplot(aaa)
plt.show()   


# train_csv['Height]
# 1사분위 :  1.631856
# q2 :  1.7
# 3사분위 :  1.762887
# iqr :  0.13103100000000012
# 이상치의 위치 :  (array([ 1271,  4084,  7272, 11718], dtype=int64),)

# train_csv['Weight]
# 1사분위 :  66.0
# q2 :  84.064875
# 3사분위 :  111.600553
# iqr :  45.600553000000005
# 이상치의 위치 :  (array([], dtype=int64),)




